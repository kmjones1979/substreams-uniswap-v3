// Code generated by Substreams. DO NOT EDIT.
use crate::pb;
use substreams::errors::Error;

pub struct Substreams{}

pub trait SubstreamsTrait {

    fn map_pools_created(
        block: substreams_ethereum::pb::eth::v2::Block,
    ) -> Result<pb::uniswap_types_v1::Pools, Error>;

    fn store_pools(
        map_pools_created: pb::uniswap_types_v1::Pools,
        store: substreams::store::StoreSetProto<pb::uniswap_types_v1::Pool>,
    );

    fn store_pool_count(
        map_pools_created: pb::uniswap_types_v1::Pools,
        store: substreams::store::StoreAddBigInt,
    );

    fn map_tokens_whitelist_pools(
        map_pools_created: pb::uniswap_types_v1::Pools,
    ) -> Result<pb::uniswap_types_v1::Erc20Tokens, Error>;

    fn store_tokens_whitelist_pools(
        map_tokens_whitelist_pools: pb::uniswap_types_v1::Erc20Tokens,
        store: substreams::store::StoreAppend<String>,
    );

    fn map_pool_sqrt_price(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
    ) -> Result<pb::uniswap_types_v1::PoolSqrtPrices, Error>;

    fn store_pool_sqrt_price(
        map_pool_sqrt_price: pb::uniswap_types_v1::PoolSqrtPrices,
        store: substreams::store::StoreSetProto<pb::uniswap_types_v1::PoolSqrtPrice>,
    );

    fn store_prices(
        map_pool_sqrt_price: pb::uniswap_types_v1::PoolSqrtPrices,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
        store: substreams::store::StoreSetBigDecimal,
    );

    fn map_pool_liquidities(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
    ) -> Result<pb::uniswap_types_v1::PoolLiquidities, Error>;

    fn store_pool_liquidities(
        map_pool_liquidities: pb::uniswap_types_v1::PoolLiquidities,
        store: substreams::store::StoreSetBigInt,
    );

    fn map_swaps_mints_burns(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
    ) -> Result<pb::uniswap_types_v1::Events, Error>;

    fn map_event_amounts(
        map_swaps_mints_burns: pb::uniswap_types_v1::Events,
    ) -> Result<pb::uniswap_types_v1::EventAmounts, Error>;

    fn map_transactions(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
    ) -> Result<pb::uniswap_types_v1::Transactions, Error>;

    fn store_totals(
        clock: substreams::pb::substreams::Clock,
        store_eth_prices: substreams::store::StoreGetBigDecimal,
        store_total_value_locked_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store: substreams::store::StoreAddBigDecimal,
    );

    fn store_total_tx_counts(
        clock: substreams::pb::substreams::Clock,
        map_swaps_mints_burns: pb::uniswap_types_v1::Events,
        store: substreams::store::StoreAddBigInt,
    );

    fn store_swaps_volume(
        clock: substreams::pb::substreams::Clock,
        map_swaps_mints_burns: pb::uniswap_types_v1::Events,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
        store_total_tx_counts: substreams::store::StoreGetBigInt,
        store_eth_prices: substreams::store::StoreGetBigDecimal,
        store: substreams::store::StoreAddBigDecimal,
    );

    fn store_pool_fee_growth_global_x128(
        map_pools_created: pb::uniswap_types_v1::Pools,
        store: substreams::store::StoreSetBigInt,
    );

    fn store_native_total_value_locked(
        map_event_amounts: pb::uniswap_types_v1::EventAmounts,
        store: substreams::store::StoreAddBigDecimal,
    );

    fn store_eth_prices(
        map_pool_sqrt_price: pb::uniswap_types_v1::PoolSqrtPrices,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
        store_prices: substreams::store::StoreGetBigDecimal,
        store_tokens_whitelist_pools: substreams::store::StoreGetRaw,
        store_native_total_value_locked: substreams::store::StoreGetBigDecimal,
        store_pool_liquidities: substreams::store::StoreGetBigInt,
        store: substreams::store::StoreSetBigDecimal,
    );

    fn store_total_value_locked_by_tokens(
        map_swaps_mints_burns: pb::uniswap_types_v1::Events,
        store: substreams::store::StoreAddBigDecimal,
    );

    fn store_total_value_locked(
        store_native_total_value_locked_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
        store_eth_prices: substreams::store::StoreGetBigDecimal,
        store: substreams::store::StoreSetBigDecimal,
    );

    fn map_ticks(
        map_swaps_mints_burns: pb::uniswap_types_v1::Events,
    ) -> Result<pb::uniswap_types_v1::Ticks, Error>;

    fn store_ticks(
        map_ticks: pb::uniswap_types_v1::Ticks,
        store: substreams::store::StoreSetProto<pb::uniswap_types_v1::Tick>,
    );

    fn store_ticks_liquidities(
        map_ticks: pb::uniswap_types_v1::Ticks,
        store: substreams::store::StoreAddBigInt,
    );

    fn map_all_positions(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
    ) -> Result<pb::uniswap_types_v1::Positions, Error>;

    fn store_all_positions(
        map_all_positions: pb::uniswap_types_v1::Positions,
        store: substreams::store::StoreSetProto<pb::uniswap_types_v1::Position>,
    );

    fn map_positions(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_all_positions: substreams::store::StoreGetProto<pb::uniswap_types_v1::Position>,
    ) -> Result<pb::uniswap_types_v1::Positions, Error>;

    fn store_position_changes(
        map_all_positions: pb::uniswap_types_v1::Positions,
        store: substreams::store::StoreAddBigDecimal,
    );

    fn map_position_snapshots(
        map_positions: pb::uniswap_types_v1::Positions,
        store_position_changes: substreams::store::StoreGetBigDecimal,
    ) -> Result<pb::uniswap_types_v1::SnapshotPositions, Error>;

    fn store_swaps(
        map_swaps_mints_burns: pb::uniswap_types_v1::Events,
        store: substreams::store::StoreSetProto<pb::uniswap_types_v1::Swap>,
    );

    fn map_fees(
        block: substreams_ethereum::pb::eth::v2::Block,
    ) -> Result<pb::uniswap_types_v1::Fees, Error>;

    fn store_fees(
        block: substreams_ethereum::pb::eth::v2::Block,
        store: substreams::store::StoreSetProto<pb::uniswap_types_v1::Fee>,
    );

    fn map_flashes(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_pools: substreams::store::StoreGetProto<pb::uniswap_types_v1::Pool>,
    ) -> Result<pb::uniswap_types_v1::Flashes, Error>;

    fn map_bundle_entities(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_eth_prices_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_factory_entities(
        block: substreams_ethereum::pb::eth::v2::Block,
        store_pool_count_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
        store_total_tx_counts_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
        store_swaps_volume_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_totals_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_pool_entities(
        map_pools_created: pb::uniswap_types_v1::Pools,
        store_pool_sqrt_price_deltas: substreams::store::Deltas<substreams::store::DeltaProto<pb::uniswap_types_v1::PoolSqrtPrice>>,
        store_pool_liquidities_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
        store_total_value_locked_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_total_value_locked_by_tokens_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_pool_fee_growth_global_x128_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
        store_prices_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_total_tx_counts_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
        store_swaps_volume_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_tokens_entities(
        map_pools_created: pb::uniswap_types_v1::Pools,
        store_swaps_volume_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_total_tx_counts_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
        store_total_value_locked_by_tokens_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_total_value_locked_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_eth_prices_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_tokens_whitelist_pools_deltas: substreams::store::Deltas<substreams::store::DeltaArray<String>>,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_tick_entities(
        store_ticks_deltas: substreams::store::Deltas<substreams::store::DeltaProto<pb::uniswap_types_v1::Tick>>,
        store_ticks_liquidities_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_position_entities(
        map_positions: pb::uniswap_types_v1::Positions,
        store_position_changes_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_position_snapshot_entities(
        map_position_snapshots: pb::uniswap_types_v1::SnapshotPositions,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_transaction_entities(
        map_transactions: pb::uniswap_types_v1::Transactions,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_swaps_mints_burns_entities(
        map_swaps_mints_burns: pb::uniswap_types_v1::Events,
        store_total_tx_counts: substreams::store::StoreGetBigInt,
        store_eth_prices: substreams::store::StoreGetBigDecimal,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_flash_entities(
        map_flashes: pb::uniswap_types_v1::Flashes,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn map_uniswap_day_data_entities(
        store_total_tx_counts_deltas: substreams::store::Deltas<substreams::store::DeltaBigInt>,
        store_totals_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
        store_swaps_volume_deltas: substreams::store::Deltas<substreams::store::DeltaBigDecimal>,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn graph_out(
        map_factory_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_bundle_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_transaction_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_pool_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_tokens_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_tick_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_position_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_position_snapshot_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_flash_entities: substreams_entity_change::pb::entity::EntityChanges,
        map_swaps_mints_burns_entities: substreams_entity_change::pb::entity::EntityChanges,
    ) -> Result<substreams_entity_change::pb::entity::EntityChanges, Error>;

    fn dummy_graph_out_store(
        graph_out: substreams_entity_change::pb::entity::EntityChanges,
        store: substreams::store::StoreSetString,
    );
}



